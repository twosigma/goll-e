/**
 * This utility implements dragging for SVG elements in React. That is, it
 * wraps mouse events and simulates drag events, but does not support complex
 * drag-and-drop functionality.
 *
 * Users of this utility should define the three callbacks and then set the
 * onMouseDown of the draggable element to mouseDownDrag.bind(this,
 * someUniqueName, myPseudoDragStartCallback, myPseudoDragEndCallback,
 * myPseudoDragCallback). someUniqueName can be anything, as long it's unique
 * within the component.
 *
 * The using component can check its state for the key
 * (someUniqueName + '_dragging') to see if a particular draggee is dragging.
 */


/**
 * Callback which is called upon at some point during a pseudo drag generated by
 *   this utility.
 *
 * @callback dragCallback
 * @param {event} event - the original mouse event
 */

/**
 * This method replaces onmousemove on the window. It is used internally by the
 *   utility and should not be used outside of the utility.
 *
 * @function onMouseMove
 * @param {string} name - used to uniquely identify a particular draggable
 *   element within a React component
 * @param {dragCallback} pseudoDragCallback - callback that is fired upon mouseMoves
 *   in order to simulate drag events for the pseudo drag. It is passed an event
 *   containing the drag position delta.
 * @param {dragCallback} event - the original mouseDown event that starts the pseudo
      drag
 * @returns {void}
 */
var onMouseMove = function(name, pseudoDragCallback, event) {
  if (this.state[name + '_dragging'] && pseudoDragCallback) {
    pseudoDragCallback(event);
  }
};

/**
 * This method replaces onmouseup and onmouseleave on the window. It is used
 *   internally by the utility and should not be used outside of the utility.
 *
 * @function onMouseUp
 * @param {string} name - used to uniquely identify a particular draggable
 *   element within a React component
 * @param {dragCallback} pseudoDragEndCallback - callback that is fired upon
 *   mouseUp or mouseLeave in order to stop pseudo dragging.
 * @param {dragCallback} event - the original mouseDown event that starts the pseudo
      drag
 * @returns {void}
 */
var onMouseUp = function(name, pseudoDragEndCallback, event) {
  // Turn off the dragging flag.
  var newState = {};
  newState[name + '_dragging'] = false;
  this.setState(newState);
  // Remove mouse listeners from the window.
  window.onmousemove = null;
  window.onmouseleave = null;
  // Call the pseudo drag end callback.
  if (pseudoDragEndCallback) {
    pseudoDragEndCallback(event);
  }
};

/**
 * This method replaces onmousedown on the draggable element. It is not used
 *   internally by the utility, but should be bound to the dragable element by
 *   its containing React component outside of the utility. For a more detailed
 *   description of the way you should use this function, see the comment at the
 *   top of the file.
 *
 * @function mouseDownDrag
 * @param {string} name - used to uniquely identify a particular draggable
 *   element within a React component
 * @param {dragCallback} pseudoDragStartCallback - callback that is fired upon
 *   mouseDown in order to start pseudo dragging.
 * @param {dragCallback} pseudoDragEndCallback - callback that is fired upon
 *   mouseUp or mouseLeave in order to stop pseudo dragging.
 * @param {dragCallback} pseudoDragCallback - callback that is fired upon mouseMoves
 *   in order to simulate drag events for the pseudo drag. It is passed an event
 *   containing the drag position delta.
 * @param {event} event - the original mouseDown event that starts the pseudo
      drag
 * @returns {void}
 */
var mouseDownDrag = function(name, pseudoDragStartCallback, pseudoDragEndCallback, pseudoDragCallback, event) {

  // Turn on the dragging flag and store the initial drag position in state.
  var newState = {};
  newState[name + '_dragging'] = true;
  this.setState(newState);

  // Register event handlers to terminate dragging when the mouse leaves
  // the window or when the button is released.
  window.onmouseup = window.onmouseleave = onMouseUp.bind(this, name, pseudoDragEndCallback);

  // Register the pseudo drag callback.
  window.onmousemove = onMouseMove.bind(this, name, pseudoDragCallback);

  // Call the pseudo drag start callback.
  if (pseudoDragStartCallback) {
    pseudoDragStartCallback(event);
  }
};

module.exports = mouseDownDrag;
